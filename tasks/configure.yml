---

- name: Ensure local hostnames
  become: yes
  lineinfile:
    dest: /etc/hosts
    line: "127.0.0.1 localhost {{ ansible_hostname }} {{ ansible_pdm_mailserver_server_hostname }}"
    regexp: ^127\.0\.0\.1
  when: local_env is not defined

- name: Start mysql
  service:
    name: mysql
    state: started
  when: ansible_pdm_mailserver_db_mysql_install

- name: Create database for mail server
  mysql_db:
    login_host: "{{ ansible_pdm_mailserver_db_host }}"
    login_user: "{{ ansible_pdm_mailserver_db_admin_username }}"
    login_password: "{{ ansible_pdm_mailserver_db_admin_password }}"
    name: "{{ ansible_pdm_mailserver_db_database }}"
    state: present
  register: ansible_pdm_mailserver_db_created

- name: Create database user for mail server
  mysql_user:
    append_privs: yes
    login_host: "{{ ansible_pdm_mailserver_db_host }}"
    login_user: "{{ ansible_pdm_mailserver_db_admin_username }}"
    login_password: "{{ ansible_pdm_mailserver_db_admin_password }}"
    name: "{{ ansible_pdm_mailserver_db_username }}"
    password: "{{ ansible_pdm_mailserver_db_password }}"
    state: present
    host: "%"
    priv: "{{ ansible_pdm_mailserver_db_database }}.*:ALL"

- name: Copy import.sql
  template:
    src: mailserver.sql.j2
    dest: /etc/postfix/import.sql
    owner: root
    group: root
    mode: 0600

- name: Import sql postfix
  mysql_db:
    name: "{{ ansible_pdm_mailserver_db_database }}"
    state: import
    login_host: "{{ ansible_pdm_mailserver_db_host }}"
    login_user: "{{ ansible_pdm_mailserver_db_username }}"
    login_password: "{{ ansible_pdm_mailserver_db_password }}"
    target: /etc/postfix/import.sql
  notify:
    - restart postfix
  when: ansible_pdm_mailserver_db_created.changed

- name: Copy main.cf
  template:
    src: etc_postfix_main.cf.j2
    dest: /etc/postfix/main.cf
    owner: root
    group: root
  notify:
    - restart postfix

- name: Copy master.cf
  copy:
    src: etc_postfix_master.cf
    dest: /etc/postfix/master.cf
    owner: root
    group: root
  notify:
    - restart postfix

- name: Copy additional postfix configuration files
  template:
    src: "etc_postfix_{{ item }}.j2"
    dest: "/etc/postfix/{{ item }}"
    owner: root
    group: root
  with_items:
    - mysql-virtual-alias-maps.cf
    - mysql-virtual-mailbox-domains.cf
    - mysql-virtual-mailbox-maps.cf
  notify:
    - restart postfix

- name: Ensure maildir is in place
  file:
    state: directory
    path: "{{ ansible_pdm_mailserver_mail_dir }}"
    owner: vmail
    group: vmail
    mode: 0770
  register: ansible_pdm_mailserver_mail_dir_created

- name: Ensure mail domain directories are in place
  file:
    state: directory
    path: "{{ ansible_pdm_mailserver_mail_dir }}/{{ item.name }}"
    owner: vmail
    group: vmail
    mode: 0770
  with_items: "{{ ansible_pdm_mailserver_virtual_domains }}"

- name: Ensure mail user directories are in place
  file:
    state: directory
    path: "{{ ansible_pdm_mailserver_mail_dir }}/{{ item.domain }}/{{ item.account }}"
    owner: vmail
    group: vmail
    mode: 0770
  with_items: "{{ ansible_pdm_mailserver_virtual_users }}"

- name: Copy additional Dovecot configuration files in place
  copy:
    src: "etc_dovecot_conf.d_{{ item }}"
    dest: "/etc/dovecot/conf.d/{{ item }}"
  with_items:
    - 10-auth.conf
    - 10-master.conf
  notify:
    - restart dovecot

- name: Template auth-sql.conf.ext
  template:
    src: etc_dovecot_conf.d_auth-sql.conf.ext.j2
    dest: /etc/dovecot/conf.d/auth-sql.conf.ext
  notify:
    - restart dovecot

- name: Template 10-mail.conf
  template:
    src: etc_dovecot_conf.d_10-mail.conf.j2
    dest: /etc/dovecot/conf.d/10-mail.conf
  notify:
    - restart dovecot

- name: Template 10-ssl.conf
  template:
    src: etc_dovecot_conf.d_10-ssl.conf.j2
    dest: /etc/dovecot/conf.d/10-ssl.conf
  notify:
    - restart dovecot

- name: Template 15-lda.conf
  template:
    src: etc_dovecot_conf.d_15-lda.conf.j2
    dest: /etc/dovecot/conf.d/15-lda.conf
  notify:
    - restart dovecot

- name: Template dovecot-sql.conf.ext
  template:
    src: etc_dovecot_dovecot-sql.conf.ext.j2
    dest: /etc/dovecot/dovecot-sql.conf.ext
  notify:
    - restart dovecot

- name: Ensure correct permissions on Dovecot config directory
  file:
    state: directory
    path: /etc/dovecot
    group: dovecot
    owner: vmail
    mode: 0770
    recurse: yes
  notify:
    - restart dovecot

- name: Configure rspamd redis settings
  template:
    mode: 0664
    src: etc_rspamd_local.d_redis.conf.j2
    dest: /etc/rspamd/local.d/redis.conf
  notify:
    - restart rspamd

- name: Create OpenDKIM key directories
  file:
    state: directory
    path: "/etc/opendkim/keys/{{ ansible_pdm_mailserver_domain }}"
    group: opendkim
    owner: opendkim
  when: not ansible_pdm_mailserver_aws_s3_backup_bucket_enable_dkim_keys
    or not ansible_pdm_mailserver_aws_s3_backup_bucket

- name: Generate OpenDKIM keys
  command: >-
    opendkim-genkey -r -d {{ ansible_pdm_mailserver_domain }}
    -D /etc/opendkim/keys/{{ ansible_pdm_mailserver_domain }}/
  args:
    creates: "/etc/opendkim/keys/{{ ansible_pdm_mailserver_domain }}/default.private"
  when: not ansible_pdm_mailserver_aws_s3_backup_bucket_enable_dkim_keys
    or not ansible_pdm_mailserver_aws_s3_backup_bucket

- name: Put additional OpenDKIM configuration files into place
  template:
    src: "etc_opendkim_{{ item }}.j2"
    dest: "/etc/opendkim/{{ item }}"
    owner: opendkim
    group: opendkim
  with_items:
    - KeyTable
    - SigningTable
    - TrustedHosts
  notify:
    - restart opendkim
    - restart postfix
  when: not ansible_pdm_mailserver_aws_s3_backup_bucket_enable_dkim_keys
    or not ansible_pdm_mailserver_aws_s3_backup_bucket

- name: Retrieve OpenDKIM keys from S3
  command: >
    aws s3 sync \
      --region {{ ansible_pdm_mailserver_aws_region }} \
      s3://{{ ansible_pdm_mailserver_aws_s3_backup_bucket }}/opendkim \
      /etc/opendkim/
  args:
    creates: /etc/opendkim/KeyTable
  when: ansible_pdm_mailserver_aws_s3_backup_bucket_enable_dkim_keys
    and ansible_pdm_mailserver_aws_s3_backup_bucket
  notify:
    - restart opendkim
    - restart postfix

- name: Set OpenDKIM config directory permissions
  file:
    state: directory
    path: /etc/opendkim
    group: opendkim
    owner: opendkim
    mode: 0700
    recurse: yes
  notify:
    - restart opendkim
    - restart postfix

- name: Copy OpenDMARC configuration file into place
  template:
    src: etc_opendmarc.conf.j2
    dest: /etc/opendmarc.conf
    owner: root
    group: root
  notify:
    - restart opendmarc

- name: Copy OpenDMARC ignore hosts file into place
  template:
    src: etc_opendmarc_ignore.hosts.j2
    dest: /etc/opendmarc/ignore.hosts
    owner: root
    group: root

- name: Create database for OpenDMARC reports
  mysql_db:
    login_host: "{{ ansible_pdm_mailserver_db_host }}"
    login_user: "{{ ansible_pdm_mailserver_db_admin_username }}"
    login_password: "{{ ansible_pdm_mailserver_db_admin_password }}"
    name: "{{ ansible_pdm_mailserver_db_opendmarc_database }}"
    state: present
  register: ansible_pdm_mailserver_db_opendmarc_created

- name: Create database user for OpenDMARC reports
  mysql_user:
    append_privs: yes
    login_host: "{{ ansible_pdm_mailserver_db_host }}"
    login_user: "{{ ansible_pdm_mailserver_db_admin_username }}"
    login_password: "{{ ansible_pdm_mailserver_db_admin_password }}"
    name: "{{ ansible_pdm_mailserver_db_username }}"
    password: "{{ ansible_pdm_mailserver_db_password }}"
    state: present
    host: "%"
    priv: "{{ ansible_pdm_mailserver_db_opendmarc_database }}.*:ALL"

- name: Copy opendmarc.sql
  template:
    src: opendmarc.sql.j2
    dest: /usr/share/doc/opendmarc/import.sql
    owner: root
    group: root
    mode: 0600

- name: Import sql opendmarc
  mysql_db:
    name: "{{ ansible_pdm_mailserver_db_opendmarc_database }}"
    state: import
    login_host: "{{ ansible_pdm_mailserver_db_host }}"
    login_user: "{{ ansible_pdm_mailserver_db_username }}"
    login_password: "{{ ansible_pdm_mailserver_db_password }}"
    target: /usr/share/doc/opendmarc/import.sql
  when: ansible_pdm_mailserver_db_opendmarc_created.changed
  notify:
    - restart opendmarc

- name: Copy nightly OpenDMARC report generation script into place
  template:
    src: etc_opendmarc_report.sh.j2
    dest: /etc/opendmarc/report.sh
    owner: root
    group: root
    mode: 0755

- name: Ensure initial report dat file exists with correct permissions
  copy:
    content: ""
    dest: /var/run/opendmarc/opendmarc.dat
    owner: opendmarc
    group: opendmarc

- name: Activate OpenDMARC report cronjob
  cron:
    name: "OpenDMARC report"
    hour: "2"
    minute: "0"
    job: >-
      /bin/bash /etc/opendmarc/report.sh >>
      /var/log/opendmarc_report.log 2>&1 ||
      tail /var/log/opendmarc_report.log

- name: Create the autoconfig XML file
  template:
    src: var_www_autoconfig_mail_config-v1.1.j2
    dest: /var/www/autoconfig/mail/config-v1.1.xml
    group: www-data
    owner: root

- name: Create autoconfig site
  template:
    src: etc_nginx_autoconfig.conf.j2
    dest: /etc/nginx/sites-available/autoconfig.conf
  notify:
    - reload nginx

- name: Enable autoconfig site
  file:
    src: /etc/nginx/sites-available/autoconfig.conf
    dest: /etc/nginx/sites-enabled/autoconfig.conf
    state: link
  notify:
    - reload nginx

- name: Copy Fail2ban filters for Dovecot
  copy:
    src: etc_fail2ban_filter.d_pdm-dovecot.conf
    dest: /etc/fail2ban/filter.d/pdm-dovecot.conf
    mode: 0644
    owner: root
    group: root
  notify:
    - restart fail2ban

- name: Copy Fail2ban filters for Postfix
  copy:
    src: etc_fail2ban_filter.d_pdm-postfix-sasl.conf
    dest: /etc/fail2ban/filter.d/pdm-postfix-sasl.conf
    mode: 0644
    owner: root
    group: root
  notify:
    - restart fail2ban

- name: Fix Fail2Ban Systemd backend
  ini_file:
    dest: /etc/fail2ban/jail.local
    mode: 0644
    option: backend
    section: DEFAULT
    value: "{{ 'systemd' if ansible_service_mgr == 'systemd' else 'auto' }}"
  notify:
    - restart fail2ban

- name: Activate Fail2Ban Dovecot
  ini_file:
    create: yes
    dest: /etc/fail2ban/jail.local
    mode: 0644
    option: "{{ item.key }}"
    section: pdm-dovecot
    value: "{{ item.value }}"
  with_dict:
    enabled: true
    filter: pdm-dovecot
    action: "iptables-multiport[name=dovecot-pop3imap, port=\"pop3,pop3s,imap,imaps\", protocol=tcp]"
    logpath: /var/log/mail.log
    maxretry: 3
    findtime: 1200
    bantime: 2400
  notify:
    - restart fail2ban

- name: Activate Fail2Ban Postfix
  ini_file:
    create: yes
    dest: /etc/fail2ban/jail.local
    mode: 0644
    option: "{{ item.key }}"
    section: pdm-postfix-sasl
    value: "{{ item.value }}"
  with_dict:
    enabled: true
    filter: pdm-postfix-sasl
    port: smtp,ssmtp,submission
    logpath: /var/log/mail.log
    maxretry: 3
    findtime: 1200
    bantime: 2400
  notify:
    - restart fail2ban

- name: Check if inside AWS
  uri:
    url: http://169.254.169.254/latest/meta-data
    timeout: 2
  register: ansible_pdm_mailserver_aws_uri_check
  failed_when: False

- name: Gather AWS facts
  action: ec2_metadata_facts
  register: ec2_vars
  when: ansible_pdm_mailserver_aws_uri_check.status == 200
  until: ec2_vars | success
  retries: 3
  delay: 5

- name: Ensures S3 backup and restore scripts
  become: yes
  template:
    dest: "{{ item.dest }}"
    mode: 0750
    src: "{{ item.src }}"
  with_items:
    - src: aws_s3_dovecot_backup.j2
      dest: /usr/local/bin/aws_s3_dovecot_backup
    - src: aws_s3_dovecot_restore.j2
      dest: /usr/local/bin/aws_s3_dovecot_restore
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_s3_backup_bucket

- name: Ensures S3 backup cron job
  become: yes
  cron:
    hour: "*"
    job: "PATH=$PATH /usr/local/bin/aws_s3_dovecot_backup > /var/log/aws_s3_dovecot_backup.log 2>&1"
    name: Backup dovecot
    minute: 0
    weekday: 1-7

- name: Restore mail from s3
  become: yes
  command: /usr/local/bin/aws_s3_dovecot_restore
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_s3_backup_bucket_enable_s3_restore
    and ansible_pdm_mailserver_aws_s3_backup_bucket
    and ansible_pdm_mailserver_mail_dir_created.changed

- name: Associate Elastic IP
  ec2_eip:
    device_id: "{{ ansible_ec2_instance_id }}"
    ip: "{{ ansible_pdm_mailserver_aws_ec2_elastic_ip }}"
    region: "{{ ansible_pdm_mailserver_aws_region }}"
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_ec2_elastic_ip

- name: Associate R53 A records
  route53:
    command: create
    overwrite: yes
    record: "{{ item }}"
    ttl: 30
    type: A
    value: "{{ ansible_pdm_mailserver_aws_ec2_elastic_ip if ansible_pdm_mailserver_aws_ec2_elastic_ip
        else ansible_ec2_public_ipv4
      }}"
    zone: "{{ ansible_pdm_mailserver_aws_r53_zone }}"
  with_items:
    - "{{ ansible_pdm_mailserver_server_hostname }}"
    - "{{ ansible_pdm_mailserver_autoconfig_hostname }}"
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_r53_zone

- name: Associate R53 SPF record
  route53:
    command: create
    overwrite: yes
    record: "{{ ansible_pdm_mailserver_domain }}"
    ttl: 30
    type: TXT
    value: "\"v=spf1 ip4:{{
      ansible_pdm_mailserver_aws_ec2_elastic_ip if ansible_pdm_mailserver_aws_ec2_elastic_ip
      else ansible_ec2_public_ipv4 }} -all\""
    zone: "{{ ansible_pdm_mailserver_aws_r53_zone }}"
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_r53_zone

- name: Associate R53 Dmarc record
  route53:
    command: create
    overwrite: yes
    record: "_dmarc.{{ ansible_pdm_mailserver_domain }}"
    ttl: 30
    type: TXT
    value: "\"v=DMARC1; p=none\""
    zone: "{{ ansible_pdm_mailserver_aws_r53_zone }}"
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_r53_zone

- name: Grab dkim public key
  shell: >-
    cat /etc/opendkim/keys/{{ ansible_pdm_mailserver_domain }}/default.txt |
    tr '\n' ' ' |  tr '\t' ' ' | grep -oE '\"v=.*\" '
  register: dkim_public_key_data
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_r53_zone

- name: Associate R53 OpenDkim record
  route53:
    command: create
    overwrite: yes
    record: "default._domainkey.{{ ansible_pdm_mailserver_domain }}"
    ttl: 30
    type: TXT
    value: "{{ dkim_public_key_data.stdout }}"
    zone: "{{ ansible_pdm_mailserver_aws_r53_zone }}"
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_r53_zone

- name: Associate R53 MX record
  route53:
    command: create
    overwrite: yes
    record: "{{ ansible_pdm_mailserver_domain }}"
    ttl: 30
    type: MX
    value: "10 {{ ansible_pdm_mailserver_server_hostname }}"
    zone: "{{ ansible_pdm_mailserver_aws_r53_zone }}"
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_r53_zone

- name: Pause for Eip and DNS
  pause:
    seconds: 90
  when: ansible_ec2_instance_id is defined
    and ansible_pdm_mailserver_aws_ec2_elastic_ip

- name: Configure LetsEncrypt
  template:
    dest: /etc/letsencrypt/cli.conf
    group: root
    mode: 0644
    owner: root
    src: etc_letsencrypt_cli.conf.j2

- name: "Get an SSL certificate for {{ ansible_pdm_mailserver_domain }} from Let's Encrypt"
  shell: "/etc/letsencrypt/letsencrypt-gencert {{ ansible_pdm_mailserver_domain }}"
  args:
    creates: "/etc/letsencrypt/live/{{ ansible_pdm_mailserver_domain }}/privkey.pem"
  when: local_env is not defined

- name: Create live directory for testing keys
  file:
    dest: "/etc/letsencrypt/live/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - "{{ ansible_pdm_mailserver_autoconfig_hostname }}"
    - "{{ ansible_pdm_mailserver_server_hostname }}"
  when: local_env is defined

- name: Create self-signed SSL certs for testing
  command: |-
    openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -days 3650
    -subj "/C=GB/ST=London/L=London/O=Dummy/CN={{ item }}"
    -keyout /etc/letsencrypt/live/{{ item }}/privkey.pem
    -out /etc/letsencrypt/live/{{ item }}/fullchain.pem
  args:
    creates: "/etc/letsencrypt/live/{{ item }}/privkey.pem"
  with_items:
    - "{{ ansible_pdm_mailserver_autoconfig_hostname }}"
    - "{{ ansible_pdm_mailserver_server_hostname }}"
  when: local_env is defined

- name: Set permissions on combined SSL certs
  file:
    name: "/etc/letsencrypt/live/{{ item }}/fullchain.pem"
    mode: 0644
  with_items:
    - "{{ ansible_pdm_mailserver_autoconfig_hostname }}"
    - "{{ ansible_pdm_mailserver_server_hostname }}"
  when: local_env is defined

- name: Start redis
  service:
    name: redis-server
    state: started
  when: ansible_pdm_mailserver_redis_install

- name: Start core services
  service:
    name: "{{ item }}"
    state: started
  with_items:
    - rspamd
    - fail2ban
    - opendmarc
    - opendkim
    - postfix
    - dovecot
    - nginx
